https://viacep.com.br/ws/14409242/json/

1º abrir o vscode e abrir a pasta zera clonada do repositório gitHub!

2º abra o terminal e rode alguns comandos para criar o ambiente virtual.
    execute:
        1º criando um ambiente virtual:
            python -m venv ambVirt
        2º ativando o ambiente virtual:
            ambVirt\Scripts\Activate

3º instalando o framework
    execute:
        1º instalando o django:
            pip install django
        2º atualize o pip:
            python.exe -m pip install --upgrade pip
        3º instalando outra ferramenta necessária:
            pip install pillow

4º criar o projeto django
    execute:
        1º crie o projeto de aplicação django:
            django-admin startproject mypet .

5º dentro de (mypet) em (settings.py) atualize as linhas 106 e 108
    LANGUAGE_CODE = 'pt-br'
    TIME_ZONE = 'America/Sao_Paulo'

6º criar o primeiro app, no caso de usuarios para que haja uma autenticação
    execute:
        python manage.py startapp usuarios
    
7º sempre que é criado um novo app é preciso ir no core da aplicação.
    Então abra o arquivo mypet/settings.py
    Adicione uma nova linha escrita:
        'usuarios',
    Lá no campo [INSTALLED_APPS]

8º agora em mypet/urls.py.
    Adicione a importação de include:
        from django.urls import path, include
    e crie uma nova url:
        path('usuarios/', include('usuarios.urls'))

9º depois dentro da pasta de usuarios crie um arquivo chamado:
    urls.py
        from django.urls import path
        from . import views

        urlpatterns = [
            path('cadastro/', views.cadastrar, name="cadastrar")
        ]
    Aqui o django procurará pelas urls que você criou a inclusão anterior.
    
10º durante a requisição HTTP através das novas urls, o sistema então acessa as views
    e é nas views que estarão escritas as funções do sistema
    inclusive a função de renderização das paginas html.

11º volte em settings.py e adicione:
    import os
    e
    em [TEMPLATES]
        'DIRS': [os.path.join(BASE_DIR, 'templates')],

12º agora você pode criar pastas de templates tanto na raiz do projeto, quanto dentro das aplicações separadamente
    neste momento crie dentro da pasta usuarios
    e na pasta raiz ao lado de ambVirt, mypet e etc...

13º dentro de usuarios/templates crie um arquivo.html para iniciar seu desenvolvimento front-end.

14º não se esqueça de chama-lo na requisição dentro de views:
    def cadastrar(request):
        return render(request, 'cadastro.html')

15º na pasta de templates da raiz
    crie seu arquivo base.html para usar de padrão visual das páginas
    cole o codigo de exemplo:
        <!doctype html>
        <html lang="pt-br">
            <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
                <title>MyPet</title>
                {% block 'cabecalho' %} {% endblock %}
            </head>
            <body>
                {% block 'conteudo' %} {% endblock %}
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
            </body>
        </html>

16º no arquivo usuarios/templates/cadastro.html
    escreva:
        {% extends 'base.html' %}

        {% block 'conteudo' %}

        {% endblock %}
    assim você esta extendendo os codigos do arquivo base e podendo adicionar codigos personalizandos dentro dos blocos atuais.

17º agora sobre o CSS:
    va na linha 120 de settings.py e subistitua a linha:
        STATIC_URL = 'static/'
    por:
        STATIC_URL = '/static/'
        STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),)
        STATIC_ROOT = os.path.join('static')

        MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        MEDIA_URL = '/media/'
    após isso, vá na pasta templates da raiz e crie uma sub pasta chamada static!
    dentro dela crie outras 5 pastas reproduzindo esta estrutura de organização:
    .static
        .geral
            .css
            .img
            .js
        .usuarios
    
18º dentro da pasta css, crie o arquivo base.css e cole este exemplar:
    :root{
        --main-color: #0b1526;
        --dark-color: #000716;
        --secondary-dark-color: rgb(15, 2, 26);
        --light-color: #00c1f3;
        --contrast-color: #f4c96b;
        --differential-color: #58fcd5;
    }
    body{
        background-color: var(--dark-color) !important;
        color: white !important;
    }

19º Volte no arquivo base.html e adicione 2 novas linhas:
    linha 1:
        {% load static %}
    linha 8:
        <link rel="stylesheet" href="{% static 'geral/css/base.css' %}">
    assim sua pagina html, vai estar linkada e carregando seu arquivo de base css!

20º Agora vamos trabalhar o css individual de cada página:
    dentro de templates/static/usuarios:
        crie 2 novas pastas:
            css
                dentro desta pasta crie o arquivo:
                    cadastro.css
            img
        
21º voltando no arquivo cadastro.html, vamos fazer as seguintes modificações antes do bloco conteudo:
    {% extends 'base.html' %}
    {% load static %}

    {% block 'cabecalho' %}
        <link rel="stylesheet" href="{% static 'usuarios/css/cadastro.css'%}">
    {% endblock %}

    {% block 'conteudo' %}

22º agora é hora de importar algumas imagens:
    então copie os arquivos de logo e background e cole eles dentro da pasta templates/usuarios/img
    nesse momento o background já será apresentado na página

23º para apresentar a logo, volte no arquivo cadastro.html e digite o src de img:
    linha 15:
        <img src="{% static 'usuarios/img/myPet.png' %}">
